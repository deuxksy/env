apply plugin: 'java' //JAVA
apply plugin: 'war' //java 포함 WEB 프로젝트 설정
apply plugin: 'eclipse' //Eclipse 프로젝트 설정
apply plugin: 'eclipse-wtp' //Eclipse-WTP 프로젝트 설정
//apply plugin: 'idea' //Intellij 프로젝트 설정
apply plugin: 'jetty' //jetty 구동 war 포함
//apply plugin: 'application' //java 포함 Standalone 실행이가능한 JavaApp ex) gradle installApp

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8' //소스 인코딩 UTF-8 설정
sourceCompatibility = 1.8 //소스 문법 1.8
version='0.1-dev' //programe version
description='gradle 사용에 필요한 설명'
buildDir = 'build'

//변수
ext {
	spring='4.2.5.RELEASE'
	logbackclassic='1.1.3'
	commonslang3='3.4'
	jodatime='2.9.3'
	guava='19.0'
	junit='4.+'
}

// eclipse 전용 설정
eclipse {
	project.natures 'org.springsource.ide.eclipse.gradle.core.nature'
	wtp {
		facet {
			facet name: 'jst.web', version: '3.1.0'
			facet name: 'jst.java', version: sourceCompatibility
		}
		component {
			contextPath = '/'		
		}
	}
}

//jar 설정
jar {
	archiveName=project.name+'.jar'
	//archiveName : jar 파일 이름 지정하지 않을시 baseName-appendix-version-classifier.extendion 생성
	manifest {
		attributes 'baseName':project.name, 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version' : version
	}
	/*
	manifest : jar 안에 있는 META-INF 들어가는 값
	baseNAme : jar 파일의 기본 이름
	appendix : 설명
	version : 버젼
	classifier : ??
	extension : 확장자 기존값 jar
	*/
	//excludes : jar 파일 에서 제외할 파일 대상 ['**/*'] 확장자가 txt 파일로 끝나는 파일 제외
	//includes : jar 파일 에서 제외할 파일 대상 ['conf/*.xml'] conf 아래 모든 xml 파일 포함
	
}

//테스트 설정
test {
	systemProperties 'key': 'value'
	/*
	systemProperties : test 실행시 JVM 전달될 system properties
	classpath : test 실행시 사용할 classpath
	excludes : test 실행시 제외할 class ex) excludes = ['org/foo/**']
	includes : test 실행시 포함할 class ex) includes = ['com/foo/**']
	minHeapSize : test 실행시 최소 Heap 메모리 크기
	maxHeapSize : test 실행시 최대 Heap 메모리 크기
	jvmArgs : test 실행시 JVM 에 추가 인자값
	useJUnit() : test 실행시 사용할 라이브러리 기본 JUnit
	useTestNG() : test 실행시 사용할 라이브러리 생략시 JUnit
	beforeTest{} :	test 실행시 사전에 수행할 작업 지정
	*/
}

jettyRun{
	contextPath = '/'
	httpPort = 8080
}

jettyRunWar{
	contextPath = '/'
	httpPort = 8080
}

//사용할 저장소 설정
repositories {
	mavenLocal()
	mavenCentral()
	/*
	mavenCentral() : Maven 중앙저장소 (http://repo1.maven.org/maven2/)
	mavenLocal() : Maven 로컬 저장소
	flatDir() : 로컬 폴더 저장소
	ivy() : Aapche Ivy 서버 저장소
	jcenter() : Bintray jcenter 서버 저장소
	*/
}

//미사용 라이브러리 설정
configurations.all {
	 all.collect { configuration ->
		configuration.exclude group: 'commons-logging', module: 'commons-logging'
		configuration.exclude group: 'log4j', module: 'log4j'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-jcl'
		configuration.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
	}
}


//사용할 라이브러리 설정
dependencies {
	providedCompile 'jstl:jstl:1.2'
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'

	compile group: 'com.google.guava', name: 'guava', version: project.ext['guava']
	compile group: 'org.apache.commons', name: 'commons-lang3', version :project.ext['commonslang3']
	compile group: 'joda-time', name: 'joda-time', version: project.ext['jodatime']
	compile group: 'ch.qos.logback', name: 'logback-classic', version: project.ext['logbackclassic']
	compile group: 'org.springframework', name: 'spring-webmvc', version : project.ext['spring']
	testCompile group: 'junit', name: 'junit', version : project.ext['junit']
	/*
	comiple : compileJava 수행시 사용
	runtime : 실행시 사용
	testCompile : compileTest 수행시 사용
	testRuntime : test 수행시 사용 (이작업은 compileJava, compileTestJava 포함 compile, testCompile 있는것이 아닌것 추가
	providedCompile : compile 동일 .war 파일 미포함
	providedRuntime : runtime 동일 .war 파일 미포함
	*/
	
}

//jar 배포 ex) gradle uploadArchives
uploadArchives {
	repositories {
		flatDir {
			dirs 'repos'
		}
	}
}

/*
별도의 gradle 설치 하지 않고도 wrapper 만으로 gradle 설치가 이루어 지고 
project root 폴더에 gradlew. gradlew.bat 으로 gradle 사용이 가능
*/
task wrapper(type: Wrapper) {
	gradleVersion = '2.12' // 원하는 Gradle 버전 명시
}

//Gradle 통해 실행되는 Java Application 에 Gradle 의 System Properties 전달하기
tasks.withType(JavaExec) {
	systemProperties System.properties
}

/*
task print {
	logger.lifecycle(project.ext['spring'])
}
*/